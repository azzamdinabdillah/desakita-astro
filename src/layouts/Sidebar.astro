---
// Sidebar component for Astro
export interface Props {
  isOpenSidebar?: boolean;
}

const { isOpenSidebar = true } = Astro.props;

// Get current path for active state detection
const currentPath = Astro.url.pathname;

// Menu data structure
const menus = [
  {
    menu: "Dashboard",
    link: "/head-village/dashboard/dashboard.html",
    icon: "/icons/menu-dashboard.svg",
  },
  {
    menu: "Kepala Rumah",
    link: "/head-village/head-house/head-house.html",
    icon: "/icons/menu-kepala-rumah.svg",
  },
  {
    menu: "Bantuan Sosial",
    icon: "/icons/menu-bansos.svg",
    isExpanded: true,
    subMenu: [
      {
        menu: "List Bansos",
        link: "/head-village/social-donate/list-social-donate/list-social-donate.html",
      },
      {
        menu: "Pengajuan Bansos",
        link: "/head-village/social-donate/applicant-social-donate/applicant-social-donate.html",
      },
    ],
  },
  {
    menu: "Jadwal Desa",
    icon: "/icons/menu-jadwal.svg",
    isExpanded: true,
    subMenu: [
      {
        menu: "Pembangunan",
        link: "/head-village/village-schedule/village-development-schedule/village-development-schedule.html",
      },
      {
        menu: "Event Desa",
        link: "/head-village/village-schedule/village-event-schedule/village-event-schedule.html",
      },
    ],
  },
  {
    menu: "Profil Desa",
    link: "/head-village/village-profile/village-profile.html",
    icon: "/icons/menu-profile.svg",
  },
  {
    menu: "Head Family Role Page",
    link: "/head-family",
    icon: "/icons/menu-profile.svg",
  },
];

// Helper function to check if menu is active
function isMenuActive(menuLink: string): boolean {
  if (menuLink === "/") {
    return currentPath === "/";
  }
  const pathSegments = currentPath.split("/");
  const menuSegments = menuLink.split("/");
  return pathSegments[1] === menuSegments[1];
}

// Helper function to check if submenu is active
function isSubMenuActive(subMenuLink: string): boolean {
  return currentPath === subMenuLink;
}
---

<div
  class={`${
    isOpenSidebar
      ? "translate-x-0 lg:translate-0"
      : "translate-x-full lg:translate-0"
  } bg-black/15 transition-all fixed z-20 h-dvh w-[100vw] lg:w-[300px]`}
>
  <div class="bg-white z-10 p-6 lg:py-[30px] h-full overflow-y-auto no-scrollbar scroll ml-auto w-[100vw] lg:w-[300px] gap-6 flex flex-col">
    <div class="top">
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-3">
          <img src="/icons/logo.svg" alt="" />
          <h1 class="text-2xl font-bold leading-normal text-black">
            DesaKita.
          </h1>
        </div>
        <button
          id="toggle-sidebar"
          class="w-11 rounded-2xl border border-bg-color p-1.5"
        >
          <img src="/icons/menu.svg" alt="" />
        </button>
      </div>
    </div>

    <div class="main-menu flex flex-col gap-2">
      <h2 class="text-sm font-medium leading-normal text-secondary-text-color">
        Main Menu
      </h2>

      {menus.map((menu, index) => {
        const isActive = menu.link ? isMenuActive(menu.link) : false;
        const hasSubMenu = menu.subMenu && menu.subMenu.length > 0;
        
        return (
          <div
            class={`menu group hover:bg-foreshadow rounded-2xl cursor-pointer transition-all text-base text-secondary-text-color font-normal leading-normal ${
              isActive ? "bg-foreshadow" : ""
            }`}
            data-menu-item={menu.menu}
            data-has-submenu={hasSubMenu}
            data-menu-link={menu.link || ""}
            data-menu-expanded={menu.isExpanded || false}
          >
            <div
              class={`flex justify-between items-center p-4 ${
                hasSubMenu && menu.isExpanded ? "pb-2" : ""
              }`}
            >
              <div class="gap-2 flex items-center">
                <img src={menu.icon} alt="" />
                <h3
                  class={`${
                    isActive ? "text-dark-green font-medium" : ""
                  } group-hover:text-dark-green group-hover:font-medium`}
                >
                  {menu.menu}
                </h3>
              </div>
              {hasSubMenu && (
                <img
                  src="/icons/dropdown-menu-sidebar.svg"
                  alt=""
                  class="transition-all"
                  data-menu-toggle={menu.menu}
                />
              )}
            </div>
            {hasSubMenu && (
              <div
                class="sub-menu overflow-hidden transition-all ml-7 relative before:absolute before:top-0 before:left-0 before:w-0.5 before:h-[70%] before:bg-[#F2F9F6]"
                data-submenu={menu.menu}
                style={`max-height: ${menu.isExpanded ? '400px' : '0px'}`}
              >
                {menu.subMenu.map((subMenu, subIndex) => {
                  const isSubActive = isSubMenuActive(subMenu.link);
                  
                  return (
                    <a
                      href={subMenu.link}
                      class="inline-block w-full"
                    >
                      <div class="relative">
                        <img
                          src="/icons/line-sub-menu.svg"
                          class="absolute left-0 top-1"
                          alt=""
                        />
                        <p
                          class={`${
                            isSubActive
                              ? "bg-foreshadow font-medium text-dark-green"
                              : "bg-transparent font-normal text-secondary-text-color"
                          } py-4 ml-8 pl-4 rounded-2xl`}
                        >
                          {subMenu.menu}
                        </p>
                      </div>
                    </a>
                  );
                })}
              </div>
            )}
          </div>
        );
      })}
    </div>
  </div>
</div>
